buildscript {
    ext.kotlin_version = '1.2.60'

    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'maven'

sourceCompatibility = 1.8

configurations {
    ktlint
}

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    ktlint "com.github.shyiko:ktlint:0.27.0"

    compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    compile group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.60'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.5'
    compile group: 'com.squareup.okhttp3', name: 'okhttp', version: '3.11.0'

    compile (group: 'com.squareup.okhttp3', name: 'logging-interceptor', version: '3.11.0') {
        exclude group: 'com.squareup.okhttp3', module: 'okhttp'
    }

    compile group: 'io.reactivex.rxjava2', name: 'rxjava', version: '2.2.0'

    compile(group: 'io.reactivex.rxjava2', name: 'rxkotlin', version: '2.2.0') {
        exclude group: 'io.reactivex.rxjava2', module: 'rxjava'
        exclude group: 'org.jetbrains.kotlin', module: 'kotlin-stdlib'
    }

    compile group: 'org.slf4j', name: 'slf4j-simple', version: '1.7.25'

    testCompile group: 'junit', name: 'junit', version: '4.12'
    testCompile group: 'org.mockito', name: 'mockito-core', version: '2.21.0'
    testCompile group: 'org.mockito', name: 'mockito-inline', version: '2.21.0' // required to test final classes
    testCompile 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC2'
    testCompile group: 'org.assertj', name: 'assertj-core', version: '3.11.0'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // see https://github.com/shyiko/ktlint#usage for more
}

check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.github.shyiko.ktlint.Main"
    args "-F", "src/**/*.kt"
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }

    exclude('universe.key')
}

task depsize {
    doLast {
        final formatStr = "%,10.2f"
        final conf = configurations.default
        final size = conf.collect { it.length() / (1024 * 1024) }.sum()
        final out = new StringBuffer()
        out << 'Total dependencies size:'.padRight(45)
        out << "${String.format(formatStr, size)} Mb\n\n"
        conf.sort { -it.length() }
                .each {
            out << "${it.name}".padRight(45)
            out << "${String.format(formatStr, (it.length() / 1024))} kb\n"
        }
        println(out)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives javadocJar
}
